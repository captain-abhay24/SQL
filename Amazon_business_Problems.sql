-- --------------------------
--business problems
-- --------------------------

--1. Top Selling Products
--Query the top 10 products by total sales value.
--Challenge: Include product name, total quantity sold, and total sales value.

select * from order_items;

--creating new column in order_items
Alter Table order_items
add column total_sale float;
--total sale=quantity*price_per_unit

update order_items
set total_sale = quantity * price_per_unit;
select * from order_items
order by quantity desc;

select 
	oi.product_id,
	p.product_name,
	sum(oi.total_sale) as Total_sale,
	count(o.order_id) as total_orders
from orders as o
join
order_items as oi
on oi.order_id= o.order_id
join
products as p
on p.product_id=oi.product_id
group by 1,2
order by 3 desc
limit 10 ;

--2.Revenue by Category
--Calculate total revenue generated by each product category.
--Challenge: Include the percentage contribution of each category to total revenue.

select 
	p.category_id,
	c.category_name,
	sum(oi.total_sale) as total_sale,
	sum(oi.total_sale)/(select sum(total_sale) from order_items) *100 as percentage_contribution		--subquery
from order_items as oi
join
products as p
on p.product_id = oi.product_id
left join category as c
on c.category_id= p.category_id
group by 1,2
order by 3 desc;

--select sum(total_sale)from order_items;(checking subquery)

--3.Average Order Value (AOV)
--Compute the average order value for each customer.
--Challenge: Include only customers with more than 5 orders.

select 
	c.customer_id,
	concat(c.first_name, ' ',c.last_name) as full_name,
	sum(total_sale)/count(o.order_id)as AOV,
	count(o.order_id)as total_orders  
from orders as o
join
customers as c
on c.customer_id=o.customer_id
join order_items as oi
on oi.order_id = o.order_id
group by 1,2
having count(o.order_id)>5;

--4.Monthly Sales Trend
--Query monthly total sales over the past year.
--Challenge: Display the sales trend, grouping by month, return current_month sale, last month sale!
select
	year ,
	month,
	total_sale as current_month_sale,
	lag(total_sale,1) over(order by year,month) as last_month_sale
from
(select 
	extract (month from order_date) as month, 
	extract(year from order_date) as year,
	round(
		sum(oi.total_sale::numeric),2)
			as total_sale
from orders as o
join 
order_items as oi
on oi.order_id=o.order_id
where order_date>= current_date-interval '540days'
group by year,month)as t1;


--5. Customers with No Purchases
--Find customers who have registered but never placed an order.
--Challenge: List customer details and the time since their registration.


--using subquery
select * from customers
where customer_id not in (select 
				distinct customer_id
				from orders)

--using join
select * from customers as c
left join 
orders as o
on o.customer_id=c.customer_id
where o.customer_id is null;

/*6. least categories by state
identify the least selling produst category for each state.
challenge: include the total sales for that category within each state.*/


with ranking_table
as
(
select
		c.state,
		cat.category_name,
		sum(oi.total_sale) as total_sale,
		rank() over(partition by c.state order by sum(oi.total_sale)) as rank
from orders as o
join 
customers as c
on o.customer_id=c.customer_id
join 
order_items as oi
on o.order_id=oi.order_id
join 
products as p
on oi.product_id=p.product_id
join
category as cat
on cat.category_id=p.category_id
group by 1,2
)
select * from ranking_table
where rank = 1;

--for each category the best category by state was electronics so i modified the question a littlebit and do it by least,

/* 7. Customer Lifetime Value (CLTV)
Calculate the total value of orders placed by each customer over their lifetime.
Challenge: Rank customers based on their CLTV.
*/

SELECT 
	c.customer_id,
	concat(c.first_name, ' ',  c.last_name) as full_name,
	SUM(total_sale) as CLTV,
	DENSE_RANK() OVER( ORDER BY SUM(total_sale) DESC) as cx_ranking
FROM orders as o
JOIN 
customers as c
ON c.customer_id = o.customer_id
JOIN 
order_items as oi
ON oi.order_id = o.order_id
GROUP BY 1;

/* 8. Inventory Stock Alerts
Query products with stock levels below a certain threshold (e.g., less than 10 units).
Challenge: Include last restock date and warehouse information.
*/

select 
		i.inventory_id,
		p.product_name,
		i.stock as current_stock_left,
		i.last_stock_date,
		i.warehouse_id
from inventory as i
join
products as p
on p.product_id=i.product_id
where stock<10;

/*
9.Shipping Delays
Identify orders where the shipping date is later than 3 days after the order date.
Challenge: Include customer, order details, and delivery provider.
*/
select 
	c.*,
	o.*,
	s.shipping_providers
from orders as o
join
customers as c
on c.customer_id = o.customer_id
join
shippings as s
on o.order_id = s.order_id
where s.shipping_date-o.order_date>3;

/*
10.Payment Success Rate 
Calculate the percentage of successful payments across all orders.
Challenge: Include breakdowns by payment status (e.g., failed, pending).
*/

select 
	p.payment_status,
	count(*) as total_cnt,
	count(*)::numeric/(select count(*) from payments)::numeric * 100
from orders as o
join
payments as p
ON o.order_id = p.order_id
group by 1;

/*
11. Top Performing Sellers
Find the top 5 sellers based on total sales value.
Challenge: Include both successful and failed orders, and display their percentage of successful orders
*/

with top_sellers
as(
select 
	s.seller_id,
	s.seller_name,
	sum(oi.total_sale)as total_sale
from orders as o
join
sellers as s
on o.seller_id = s.seller_id
join
order_items as oi
on oi.order_id = o.order_id
group by 1,2
order by 3 desc
limit 5),

sellers_reports as
(select
	o.seller_id,
	ts.seller_name,
	o.order_status,
	count(*) as total_orders
from orders as o
join
top_sellers as ts
on ts.seller_id=o.seller_id
where 
	o.order_status not in ('Inprogress', 'Returned')
group by 1,2,3
)
SELECT 
	seller_id,
	seller_name,
	SUM(CASE WHEN order_status = 'Completed' THEN total_orders ELSE 0 END) as Completed_orders,
	SUM(CASE WHEN order_status = 'Cancelled' THEN total_orders ELSE 0 END) as Cancelled_orders,
	SUM(total_orders) as total_orders,
	SUM(CASE WHEN order_status = 'Completed' THEN total_orders ELSE 0 END)::numeric/
	SUM(total_orders)::numeric * 100 as successful_orders_percentage
from sellers_reports
group by 1,2
;


/*
12.Product Profit Margin
Calculate the profit margin for each product (difference between price and cost of goods sold).
Challenge: Rank products by their profit margin, showing highest to lowest.
*/

SELECT 
	product_id,
	product_name,
	profit_margin,
	DENSE_RANK() OVER( ORDER BY profit_margin DESC) as product_ranking
FROM
(SELECT 
	p.product_id,
	p.product_name,
	-- SUM(total_sale - (p.cogs * oi.quantity)) as profit,
	SUM(total_sale - (p.cogs * oi.quantity))/sum(total_sale) * 100 as profit_margin
FROM order_items as oi
JOIN 
products as p
ON oi.product_id = p.product_id
GROUP BY 1, 2
) as t1;

/*
13. Most Returned Products
Query the top 10 products by the number of returns.
Challenge: Display the return rate as a percentage of total units sold for each product.
*/

SELECT 
	p.product_id,
	p.product_name,
	COUNT(*) as total_unit_sold,
	SUM(CASE WHEN o.order_status = 'Returned' THEN 1 ELSE 0 END) as total_returned,
	SUM(CASE WHEN o.order_status = 'Returned' THEN 1 ELSE 0 END)::numeric/COUNT(*)::numeric * 100 as return_percentage
FROM order_items as oi
JOIN 
products as p
ON oi.product_id = p.product_id
JOIN orders as o
ON o.order_id = oi.order_id
GROUP BY 1, 2
ORDER BY 5 DESC

/*
14.Inactive Sellers
Identify sellers who havenâ€™t made any sales in the last 12 months.
Challenge: Show the last sale date and total sales from those sellers.
*/

with cte1----this seller has nowdone any sale in last 1 year
as (select * from sellers
where seller_id not in (select seller_id from orders where order_date>=current_date-interval'1year')

)

select
	o.seller_id,
	max(o.order_date) as last_sale_date,
	max(oi.total_sale) as last_sale_amount
	
from orders as o
join
cte1
on cte1.seller_id=o.seller_id
join
order_items as oi
on o.order_id=oi.order_id
group by 1


/*
15.IDENTITY customers into returning or new
if the customer has done more than 5 return categorize them as returning otherwise new
Challenge: List customers id, name, total orders, total returns
*/

SELECT 
c_full_name as customers,
total_orders,
total_return,
CASE
	WHEN total_return > 5 THEN 'Returning_customers' ELSE 'New'
END as cx_category
FROM
(SELECT 
	CONCAT(c.first_name, ' ', c.last_name) as c_full_name,
	COUNT(o.order_id) as total_orders,
	SUM(CASE WHEN o.order_status = 'Returned' THEN 1 ELSE 0 END) as total_return	
FROM orders as o
JOIN 
customers as c
ON c.customer_id = o.customer_id
JOIN
order_items as oi
ON oi.order_id = o.order_id
GROUP BY 1)


/*
16.Top 5 Customers by Orders in Each State
Identify the top 5 customers with the highest number of orders for each state.
Challenge: Include the number of orders and total sales for each customer
*/

SELECT * FROM 
(SELECT 
	c.state,
	CONCAT(c.first_name, ' ', c.last_name) as customers,
	COUNT(o.order_id) as total_orders,
	SUM(total_sale) as total_sale,
	DENSE_RANK() OVER(PARTITION BY c.state ORDER BY COUNT(o.order_id) DESC) as rank
FROM orders as o
JOIN 
order_items as oi
ON oi.order_id = o.order_id
JOIN 
customers as c
ON 
c.customer_id = o.customer_id
GROUP BY 1, 2
) as t1
WHERE rank <=5;


/*
17.Revenue by shipping provider
Calculate the total revenue handled by each shipping provider.
Challenge: Include the total number of orders handledand the average delivery time for each provider.
*/


select 
	s.shipping_providers,
	count(O.order_id)as order_handled,
	sum(Oi.total_sale) as total_sale,
	coalesce(Avg(s.return_date -s.shipping_date),0)as average_days
from orders as o 
join
order_items as oi
on oi.order_id=o.order_id
join
shippings as s
on s.order_id = o.order_id
group by 1;



/*
---------Stored Procedure
create a function as soon as the product is sold the same quantity should be reduced from the inventory table
after adding any sales records it should update the stock in the inventory table based on the product and qty purchased
*/

select * from inventory;

select * from orders;
select* from order_items;
select * from inventory;
order_id,
order_date,
customer_id,
seller_id,
order_item_id,
product_id,
quantity,

create or replace procedure add_sales
(
p_order_id int,
p_customer_id int,
p_seller_id int,
p_order_item_id int,
p_product_id int,
p_quantity int
)
language plpgsql
as $$

declare
--all variable declare here
v_count int;
v_price float;
v_product varchar(50);
Begin
--fetching product name and price
select price, product_name 
into v_price float, v_product from products
where product_id = p_product_id;

--checking stock and product availability in inventory
select 
	count(*)
	into v_count
from inventory
where product_id = p_product_id
	and
	stock>=p_quantity;
	if v_count > 0 then
	--update inventory
	insert into orders(order_ID, ORDER_DATE, CUSTOMER_id, seller_id)
	values(p_order_id,current_date, p_customer_id, p_seller_id);
	insert into order_items(ORDer_item_id, order_id, product_id,quantity, price_per_unit, total_sale)
	values(p_order_item_id, p_order_id, p_product_id, p_quantity,v_price,v_price*p_quantity);
	--update the inventory
	update inventory
	set stock = stock - p_quantity
	where product_id = p_product_id;

	raise notice 'Thank you Product: % ,sale has been added also innventory stock updated',v_product;
	else
	raise notice 'Thank you for your info product: % is not available',v_product;

	end if;


End;
$$


call add_sales(
25000,2,5,25001,1,40
);








